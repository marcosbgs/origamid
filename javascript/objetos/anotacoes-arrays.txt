ARRAYS

=> Armazena uma coleção de elementos
=> toda array herda os métodos e propriedades do protótipo do construtor Array
---------------------------------------------------------------------------------------------
=> Array.from()
    transforma array-like objects em uma array
    cosnt arrayLi = Array.from(li)

=> Array.isArray()
    verifica se realmente é uma array e retorna valor booleano
    Array.isArray(carros);

=> Array.of(), Array(), new Array()
    serve para CRIAR arrays.
        Array.of(10); => [10] - passa ARGUMENTOS e constroi um array com os argumentos
        Array.of(1, 2, 3, 4); => [1, 2, 3, 4]
        new Array(5); => [,,,,] - cria uma array VAZIA com 5 itens
        Array(5); => [,,,,] - cria uma array VAZIA com 5 itens
        Array(1, 2, 3, 4); => [1, 2, 3, 4] 
---------------------------------------------------------------------------------------------
PROPRIEDADES E MÉTODOS DO PROTOTYPE

=> [].length - retorna o TAMANHO da array
---------------------------------------------------------------------------------------------
MÉTODOS MODIFICADORES [].sort()
=> retornam um valor e modificam o array original

=> [].sort() - organiza a array pelo unicode (VAI DE CARACTER EM CARACTER)
    excelente para colocar strings em ordem alfabética
    const instrumentos = ['Guitarra', 'Baixo', 'Violão'];
    instrumentos.sort();
    instrumentos; // ['Baixo', 'Guitarra', Violão]

    const idades = [32,21,33,43,1,12,8, 425];
    idades.sort();
    idades; // [1, 12, 21, 32, 33, 425, 43, 8]

=> [].unshift() 
    ADICIONA elementos no INÍCIO do array e retorna o length da mesma
        const carros = ['Ford', 'Fiat', 'VW'];
        carros.unshift('Honda', 'Kia'); // 5
        carros; // ['Honda', 'Kia', 'Ford', 'Fiat', 'VW'];
=> [].push()
    ADICIONA elementos no FINAL do array e retorna o length da mesma
        carros.push('Ferrari'); // 6
        carros; // ['Honda', 'Kia', 'Ford', 'Fiat', 'VW', 'Ferrari'];

=> [].shift()
    REMOVE o PRIMEIRO elemento do array e retorna o mesmo
        const carros = ['Ford', 'Fiat', 'VW', 'Honda'];
        const primeiroCarro = carros.shift(); // 'Ford'
        carros; // ['Fiat', 'VW', 'Honda'];

=> [].pop()
    REMOVE o ÚLTIMO elemento do array e retorna o mesmo
        const ultimoCarro = carros.pop(); // 'Honda'
        carros; // ['Fiat', 'VW'];

=> [].reverse()
    INVERTE os itens da array e retorna a nova array
        const carros = ['Ford', 'Fiat', 'VW', 'Honda'];
        carros.reverse(); // ['Honda', 'VW', 'Fiat', 'Ford'];

=> [].splice()
    ADICIONA valores na array a partir do INDEX
    REMOVE a quantidade de itens que for passada no segundo parâmetro
    [].splice(index, remover, item1, item2, ...)
        const carros = ['Ford', 'Fiat', 'VW', 'Honda'];
        carros.splice(1, 0, 'Kia', 'Mustang'); // []
        console.log(carros); // ['Ford', 'Kia', 'Mustang', 'Fiat', 'VW', 'Honda']

        carros.splice(3, 2, 'Ferrari'); // ['Fiat', 'VW']
        console.log(carros); // ['Ford', 'Kia', 'Mustang', 'Ferrari', 'Honda']
        
=> [].copyWithin()
    [].copyWithin(alvo, início, final) -> a partir do ALVO, o método irá copiar o array, começando do INÍCIO que eu defini, e vai até o FINAL que eu defini e vai PREENCHER A PRÓPRIA ARRAY com essa CÓPIA. Caso não defina os valores de INÍCO e FINAL, a cópia será do ÍNDICE 0 até o VALOR TOTAL DA ARRAY.

    console.log(['Item1', 'Item2', 'Item3', 'Item4', 'Item5'].copyWithin(2, 0, 3));

=> [].fill()
    [].fill(valor, início, final) -> preenche a array com o valor passado, a partir de um determinado INÍCIO até um FINAL.

    ['Item1', 'Item2', 'Item3', 'Item4'].fill('Banana'); PREENCE TUDO COM BANANA, POIS NÃO DEFINI INÍCO E FINAL
    // ['Banana', 'Banana', 'Banana', 'Banana']

    ['Item1', 'Item2', 'Item3', 'Item4'].fill('Banana', 2); PREENHE COM BANANA A PARTIR DO INDEX 2
    // ['Item1', 'Item2', 'Banana', 'Banana']

    ['Item1', 'Item2', 'Item3', 'Item4'].fill('Banana', 1, 3); PREENCHE COM BANANA A PARTIR DO INDEX 1 ATÉ O INDEX 3
    // ['Item1', 'Banana', 'Banana', 'Item4']

-----------------------------------------------------------------------------------------------------------
MÉTODOS DE ACESSO -> NÃO MODIFICAM A ARRAY original

=> [].concat()
    concatena o array com o valor passado
    const transporte1 = ['Barco', 'Aviao'];
    const transporte2 = ['Carro', 'Moto'];
    const transportes = transporte1.concat(transporte2);

=> [].includes()
    [].includes(valor) -> verifica se a array possui o valor e retorna booleano

=> [].indexOf()
    [].indexOf(valor) -> verifica se a array possui o valor e retorna o INDEX do PRIMEIRO VALOR NA ARRRAY

=>[].lastIndexOf()
    [].lastIndexOf(valor) -> retorna o index do último

=> EXEMPLOS 
    const linguagens = ['html', 'css', 'js', 'php', 'python', 'js'];
    console.log(linguagens);


    console.log(linguagens.includes('css')); // true
    console.log(linguagens.includes('ruby')); // false
    console.log(linguagens.indexOf('python')); // 4
    console.log(linguagens.indexOf('js')); // 2
    console.log(linguagens.lastIndexOf('js')); // 5


=> [].join() -> junta os valores da array e retorna como STRING
    const linguagens = ['html', 'css', 'js', 'php', 'python'];

    [].join(separador)
    linguagens.join(); // 'html,css,js,php,python' -> não passar um separador, por padrão ser a VÍRGULA SEM ESPAÇO
    linguagens.join(''); // 'htmlcssjsphppython' -> STRING VAZIA como separador fica tudo junto
    linguagens.join(' '); // 'html css js php python' -> separador é ESPAÇO
    linguagens.join('-_-'); // 'html-_-css-_-js-_-php-_-python' -> separador é -_-

=> [].slice()
    [].slice(início, final) -> RETORNA os itens da array começando pelo INÍCIO e indo até o FINAL

    const linguagens = ['html', 'css', 'js', 'php', 'python'];
    linguagens.slice(3); // ['php', 'python'] -> mostra a PARTIR DO INDEX 3(INDEX 3 INCLUSO)
    linguagens.slice(1, 4); // ['css', 'js', 'php'] -> mostra a PARTIR DO INDEX 1 até o INDEX 3. INDEX 4 NÃO INCLUSO

    const cloneLinguagens = linguagens.slice();

    ----------OBSERVAÇÃO-----------
        const linguagens = ['html', 'css', 'js', 'php', 'python'];

        const cloneLinguagens = linguagens; ==> NÃO É UM CLONE, É VALOR DE REFERÊNCIA. SE MODIFICAR A ARRAY linguagens, MODIFICA A ARRAY cloneLinguagens

        const cloneLinguagens = linguagens.slice(); ==> AGORA SIM ESTOU FAZENDO UM CLONE DA ARRAY linguagens.
